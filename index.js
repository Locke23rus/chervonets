// Generated by CoffeeScript 1.7.1
var Board, CANVAS_WIDTH, Cell, FRAME_RATE, Game, N, TIME, WAVE_RATE, WAVE_TIME, WIDTH, bestScore, board, canvas, ctx, game, init, newGame, showBestScore, togglePause;

Array.prototype.unique = function() {
  return this.filter(function(value, index, self) {
    return self.indexOf(value) === index;
  });
};

Array.prototype.randomElement = function() {
  return this[Math.floor(Math.random() * this.length)];
};

Board = (function() {
  function Board() {
    this.cells = [];
    this.selectedCell = null;
    this.clickedCell = null;
    this.targetCell = null;
    this.fill();
  }

  Board.prototype.randomNumber = function() {
    var k;
    k = 0;
    while (k === 0 || k >= N) {
      k = Math.floor(Math.random() * 10);
    }
    return k;
  };

  Board.prototype.fill = function() {
    var i, j, _results;
    j = 0;
    _results = [];
    while (j < N) {
      this.cells.push([]);
      i = 0;
      while (i < N) {
        this.cells[j][i] = this.randomNumber();
        i++;
      }
      _results.push(j++);
    }
    return _results;
  };

  Board.prototype.draw = function() {
    var cell, i, j, _results;
    this.clear();
    j = 0;
    _results = [];
    while (j < N) {
      i = 0;
      while (i < N) {
        cell = new Cell(i, j);
        if (cell.n() != null) {
          if (this.isSelected(cell)) {
            cell.drawSelect();
          } else {
            cell.draw();
          }
        }
        i++;
      }
      _results.push(j++);
    }
    return _results;
  };

  Board.prototype.emptyCells = function() {
    var a, i, j;
    a = [];
    j = 0;
    while (j < N) {
      i = 0;
      while (i < N) {
        if (this.cells[j][i] == null) {
          a.push(new Cell(i, j));
        }
        i++;
      }
      j++;
    }
    return a;
  };

  Board.prototype.availableNumbers = function() {
    var a, i, j;
    a = [];
    j = 0;
    while (j < N) {
      i = 0;
      while (i < N) {
        if (this.cells[j][i]) {
          a.push(this.cells[j][i]);
        }
        i++;
      }
      j++;
    }
    return a.unique();
  };

  Board.prototype.insert = function(cell, n) {
    return this.cells[cell.j][cell.i] = n;
  };

  Board.prototype.remove = function(cell) {
    return this.cells[cell.j][cell.i] = null;
  };

  Board.prototype.addRandomCell = function() {
    return this.insert(this.emptyCells().randomElement(), this.availableNumbers().randomElement());
  };

  Board.prototype.hasBlocks = function() {
    var i, j;
    j = 0;
    while (j < N) {
      i = 0;
      while (i < N) {
        if (this.cells[j][i] != null) {
          return true;
        }
        i++;
      }
      j++;
    }
    return false;
  };

  Board.prototype.clear = function() {
    return ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_WIDTH);
  };

  Board.prototype.drawFinish = function() {
    return this.drawText('Finish!');
  };

  Board.prototype.drawPaused = function() {
    return this.drawText('Paused');
  };

  Board.prototype.drawText = function(text) {
    this.clear();
    ctx.fillStyle = '#000';
    ctx.font = '50px Slackey';
    ctx.textBaseline = 'middle';
    return ctx.fillText(text, CANVAS_WIDTH / 2 - 85, CANVAS_WIDTH / 2);
  };

  Board.prototype.click = function(x, y) {
    var i, j;
    i = Math.floor(x / WIDTH);
    j = Math.floor(y / WIDTH);
    this.clickedCell = new Cell(i, j);
    if (this.clickedCell.isEmpty() && (this.selectedCell == null)) {
      return;
    }
    if ((this.selectedCell != null) && this.isAvailableToMove()) {
      if (this.isSameNumber() || this.isMaxInSum()) {
        game.incrementScore(this.scoreFactor(this.hitDistance()));
        this.remove(this.selectedCell);
        this.remove(this.clickedCell);
        this.selectedCell = null;
        if (!this.hasBlocks()) {
          board.drawFinish();
          game.finish();
        }
        return;
      } else if (this.clickedCell.isEmpty()) {
        this.targetCell = this.moveCellTarget();
        this.insert(this.targetCell, this.selectedCell.n());
        game.decrementScore(this.scoreFactor(this.moveDistance()));
        this.remove(this.selectedCell);
        this.selectedCell = null;
        return;
      }
    }
    return this.selectedCell = this.clickedCell;
  };

  Board.prototype.hitDistance = function() {
    if (this.isSameRow()) {
      return Math.abs(this.clickedCell.i - this.selectedCell.i) + 1;
    } else {
      return Math.abs(this.clickedCell.j - this.selectedCell.j) + 1;
    }
  };

  Board.prototype.moveDistance = function() {
    if (this.isSameRow()) {
      return Math.abs(this.targetCell.i - this.selectedCell.i);
    } else {
      return Math.abs(this.targetCell.j - this.selectedCell.j);
    }
  };

  Board.prototype.scoreFactor = function(n) {
    var i, sum;
    sum = 0;
    i = 0;
    while (i <= n) {
      sum += i;
      i++;
    }
    return sum;
  };

  Board.prototype.moveCellTarget = function() {
    var i, j, t;
    t = void 0;
    i = void 0;
    j = void 0;
    if (this.isSameRow()) {
      if (this.clickedCell.i > this.selectedCell.i) {
        i = this.clickedCell.i;
        while (i < N) {
          if (this.cells[this.selectedCell.j][i] == null) {
            t = i;
          } else {
            break;
          }
          i++;
        }
      } else {
        i = this.clickedCell.i;
        while (i >= 0) {
          if (this.cells[this.selectedCell.j][i] == null) {
            t = i;
          } else {
            break;
          }
          i--;
        }
      }
      return new Cell(t, this.selectedCell.j);
    } else {
      if (this.clickedCell.j > this.selectedCell.j) {
        j = this.clickedCell.j;
        while (j < N) {
          if (this.cells[j][this.selectedCell.i] == null) {
            t = j;
          } else {
            break;
          }
          j++;
        }
      } else {
        j = this.clickedCell.j;
        while (j >= 0) {
          if (this.cells[j][this.selectedCell.i] == null) {
            t = j;
          } else {
            break;
          }
          j--;
        }
      }
      return new Cell(this.selectedCell.i, t);
    }
  };

  Board.prototype.isAvailableToMove = function() {
    var i, j, max, min;
    if (!(this.isSameRow() || this.isSameCol())) {
      return false;
    }
    min = void 0;
    max = void 0;
    if (this.isSelf()) {
      return false;
    } else if (this.isSameRow()) {
      min = Math.min(this.selectedCell.i, this.clickedCell.i);
      max = Math.max(this.selectedCell.i, this.clickedCell.i);
      if ((min + 1) === max) {
        return true;
      } else {
        i = min + 1;
        while (i < max) {
          if (this.cells[this.selectedCell.j][i] != null) {
            return false;
          }
          i++;
        }
        return true;
      }
    } else if (this.isSameCol()) {
      min = Math.min(this.selectedCell.j, this.clickedCell.j);
      max = Math.max(this.selectedCell.j, this.clickedCell.j);
      if ((min + 1) === max) {
        return true;
      } else {
        j = min + 1;
        while (j < max) {
          if (this.cells[j][this.selectedCell.i] != null) {
            return false;
          }
          j++;
        }
        return true;
      }
    }
    return false;
  };

  Board.prototype.isSameNumber = function() {
    return this.selectedCell.n() === this.clickedCell.n();
  };

  Board.prototype.isMaxInSum = function() {
    return (this.selectedCell.n() + this.clickedCell.n()) === N;
  };

  Board.prototype.isSelf = function() {
    return this.selectedCell.i === this.clickedCell.i && this.selectedCell.j === this.clickedCell.j;
  };

  Board.prototype.isSameRow = function() {
    return this.selectedCell.j === this.clickedCell.j;
  };

  Board.prototype.isSameCol = function() {
    return this.selectedCell.i === this.clickedCell.i;
  };

  Board.prototype.isSelected = function(cell) {
    return (this.selectedCell != null) && this.selectedCell.i === cell.i && this.selectedCell.j === cell.j;
  };

  return Board;

})();

Cell = (function() {
  function Cell(i, j) {
    this.i = i;
    this.j = j;
    this.x = this.i * WIDTH;
    this.y = this.j * WIDTH;
  }

  Cell.prototype.color = function() {
    switch (this.n()) {
      case 1:
        return "#FF6633";
      case 2:
        return "#FF3333";
      case 3:
        return "#FF66FF";
      case 4:
        return "#CC99FF";
      case 5:
        return "#CCCCFF";
      case 6:
        return "#6699FF";
      case 7:
        return "#FFFF66";
      case 8:
        return "#66CC66";
      case 9:
        return "#CCFF66";
      default:
        return "#FFF";
    }
  };

  Cell.prototype.draw = function() {
    this.drawBackground(this.color());
    return this.drawNumber("#000");
  };

  Cell.prototype.drawBackground = function(color) {
    ctx.fillStyle = color;
    ctx.fillRect(this.x, this.y, WIDTH, WIDTH);
    ctx.strokeStyle = "#FFF";
    return ctx.strokeRect(this.x, this.y, WIDTH, WIDTH);
  };

  Cell.prototype.drawNumber = function(color) {
    ctx.fillStyle = color;
    ctx.font = "30px monospaced";
    ctx.textBaseline = "middle";
    return ctx.fillText(this.n(), this.x + 15, this.y + 25);
  };

  Cell.prototype.isEmpty = function() {
    return this.n() == null;
  };

  Cell.prototype.drawSelect = function() {
    this.drawBackground("#000066");
    return this.drawNumber("#FFF");
  };

  Cell.prototype.clear = function() {
    return ctx.clearRect(this.x, this.y, WIDTH, WIDTH);
  };

  Cell.prototype.n = function() {
    return board.cells[this.j][this.i];
  };

  return Cell;

})();

Game = (function() {
  function Game() {
    this.score = 0;
    this.paused = false;
    this.showScore();
    this.interval = null;
    this.remainingTime = TIME;
    this.timeInterval = null;
    this.waveTime = WAVE_TIME * 1000;
    this.waveInterval = null;
  }

  Game.prototype.showScore = function() {
    return document.getElementById('score').innerText = this.score.toString();
  };

  Game.prototype.setBestScore = function() {
    return localStorage.setItem('best_score', this.score);
  };

  Game.prototype.togglePause = function() {
    this.paused = !this.paused;
    if (this.paused) {
      this.stop();
      board.drawPaused();
      return document.getElementById('pause').innerText = 'Continue';
    } else {
      this.start();
      board.draw();
      return document.getElementById('pause').innerText = 'Pause';
    }
  };

  Game.prototype.incrementScore = function(n) {
    this.score += n;
    return this.showScore();
  };

  Game.prototype.decrementScore = function(n) {
    this.score -= n;
    return this.showScore();
  };

  Game.prototype.start = function() {
    this.showTime();
    this.interval = setInterval((function() {
      return board.draw();
    }), FRAME_RATE);
    this.timeInterval = setInterval((function() {
      return game.updateTime();
    }), 1000);
    return this.waveInterval = setInterval((function() {
      return game.updateWave();
    }), WAVE_RATE);
  };

  Game.prototype.finish = function() {
    this.stop();
    if (this.score > bestScore()) {
      this.setBestScore();
      return showBestScore();
    }
  };

  Game.prototype.stop = function() {
    clearInterval(this.interval);
    clearInterval(this.timeInterval);
    return clearInterval(this.waveInterval);
  };

  Game.prototype.updateTime = function() {
    this.remainingTime--;
    this.showTime();
    if (this.remainingTime === 0) {
      board.drawFinish();
      return game.finish();
    }
  };

  Game.prototype.updateWave = function() {
    this.waveTime -= WAVE_RATE;
    this.showWave();
    if (this.waveTime === 0) {
      if (board.emptyCells().length !== 0) {
        board.addRandomCell();
      }
      return this.waveTime = WAVE_TIME * 1000;
    }
  };

  Game.prototype.showTime = function() {
    return document.getElementById('time').innerText = this.remainingTime;
  };

  Game.prototype.showWave = function() {
    return document.getElementById('wave').style.width = (this.waveTime / WAVE_RATE) + 'px';
  };

  return Game;

})();

N = 4;

CANVAS_WIDTH = 500;

WIDTH = Math.floor(CANVAS_WIDTH / N);

FRAME_RATE = 1000 / 30;

TIME = 60;

WAVE_TIME = 5;

WAVE_RATE = WAVE_TIME * 10;

canvas = document.getElementById('game-canvas');

ctx = canvas.getContext('2d');

game = new Game();

board = null;

canvas.addEventListener('click', (function(e) {
  return board.click(e.offsetX, e.offsetY);
}), false);

bestScore = function() {
  return parseInt(localStorage.getItem('best_score') || 0, 10);
};

showBestScore = function() {
  return document.getElementById('best-score').innerText = bestScore();
};

newGame = function() {
  game.stop();
  game = new Game();
  board = new Board();
  return game.start();
};

togglePause = function() {
  return game.togglePause();
};

init = function() {
  return showBestScore();
};

init();

//# sourceMappingURL=index.map
